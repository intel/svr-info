# Copyright (C) 2023 Intel Corporation
# SPDX-License-Identifier: MIT
#
# Template file used to generate the configuration (YAML) for the collector
############
# Collector's YAML format
#   Root level keys
#       arguments
#       commands
#   Commands are list items to maintain order.
#   Required command attributes:
#       label - a unique label for each command
#       command - will be executed by bash
#   Optional command attributes:
#       superuser - bool indicates need for elevated privilege (default: false)
#       run - bool indicates if command will be run (default: false)
#       modprobe - comma separated list of kernel modules required to run command
#       parallel - bool indicates if command can be run in parallel with other commands (default: false)
###########

############
# global arguments
############
arguments:
    name: 
    bin_path: 
    command_timeout: 
############
# commands --
############
commands:
  - label: date -u
    command: date -u
    parallel: true
  - label: date
    command: date +%m/%d/%y
    parallel: true
  - label: lscpu
    command: lscpu
    parallel: true
  - label: cpuid -1
    command: cpuid -1
    modprobe: cpuid
    parallel: true
  - label: max_cstate
    command: |-
        cat /sys/module/intel_idle/parameters/max_cstate
    parallel: true
  - label: cpu_freq_driver
    command: |-
        cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_driver
    parallel: true
  - label: cpu_freq_governor
    command: |-
        cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
    parallel: true
  - label: base frequency
    command: cat /sys/devices/system/cpu/cpu0/cpufreq/base_frequency
    parallel: true
  - label: maximum frequency
    command: cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq
    parallel: true
  - label: lsblk -r -o
    command: lsblk -r -o NAME,MODEL,SIZE,MOUNTPOINT,FSTYPE,RQ-SIZE,MIN-IO -e7 -e1
    parallel: true
  - label: df -h
    command: df -h
    parallel: true
  - label: uname -a
    command: uname -a
    parallel: true
  - label: ps -eo
    command: ps -eo pid,ppid,%cpu,%mem,rss,command --sort=-%cpu,-pid | grep -v "]" | head -n 20
    parallel: false
  - label: irqbalance
    command: pgrep irqbalance
    parallel: true
  - label: /proc/cpuinfo
    command: cat /proc/cpuinfo
    parallel: true
  - label: /proc/meminfo
    command: cat /proc/meminfo
    parallel: true
  - label: /proc/cmdline
    command: cat /proc/cmdline
    parallel: true
  - label: transparent huge pages
    command: cat /sys/kernel/mm/transparent_hugepage/enabled
    parallel: true
  - label: automatic numa balancing
    command: cat /proc/sys/kernel/numa_balancing
    parallel: true
  - label: /etc/*-release
    command: cat /etc/*-release
    parallel: true
  - label: gcc version
    command: gcc --version
    parallel: true
  - label: binutils version
    command: ld -v
    parallel: true
  - label: glibc version
    command: ldd --version
    parallel: true
  - label: python version
    command: python --version 2>&1
    parallel: true
  - label: python3 version
    command: python3 --version
    parallel: true
  - label: java version
    command: java -version 2>&1
    parallel: true
  - label: openssl version
    command: openssl version
    parallel: true
  - label: dmidecode
    command: dmidecode
    superuser: true
    parallel: true
  - label: lshw
    command: lshw -businfo -numeric
    superuser: true
    parallel: true
  - label: spectre-meltdown-checker
    command: spectre-meltdown-checker.sh --batch text
    superuser: true
    parallel: true
  - label: rdmsr 0x1a4
    command: msrread -f 7:0 0x1a4  # MSR_PREFETCH_CONTROL: L2, DCU, and AMP Prefetchers enabled/disabled
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x1b0
    command: msrread -f 3:0 0x1b0  # IA32_ENERGY_PERF_BIAS: Performance Energy Bias Hint (0 is highest perf, 15 is highest energy saving)
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x1ad
    command: msrread 0x1ad  # MSR_TURBO_RATIO_LIMIT: Maximum Ratio Limit of Turbo Mode
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x1ae
    command: msrread 0x1ae  # MSR_TURBO_GROUP_CORE_CNT: Group Size of Active Cores for Turbo Mode Operation
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x4f
    command: msrread -a 0x4f  # MSR_PPIN: Protected Processor Inventory Number
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x610
    command: msrread -f 14:0 0x610  # MSR_PKG_POWER_LIMIT: Package limit in bits 14:0
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0x6d
    command: msrread 0x6d  # TODO: what is the name/ID of this MSR? SPR Features
    superuser: true
    modprobe: msr
    parallel: true
  - label: rdmsr 0xc90
    command: msrread 0xc90
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore cha count
    command: msrread 0x702
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore client cha count
    command: msrread 0x396
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore cha count spr
    command: msrread 0x2FFE
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore max frequency
    command: msrread -f 6:0 0x620  # MSR_UNCORE_RATIO_LIMIT: MAX_RATIO in bits 6:0
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore min frequency
    command: msrread -f 14:8 0x620  # MSR_UNCORE_RATIO_LIMIT: MIN_RATIO in bits 14:8
    superuser: true
    modprobe: msr
    parallel: true
  - label: uncore max frequency tpmi
    command: pcm-tpmi 2 0x18 -d -b 8:14
    superuser: true
    parallel: true
  - label: uncore min frequency tpmi
    command: pcm-tpmi 2 0x18 -d -b 15:21
    superuser: true
    parallel: true
  - label: active idle utilization point
    command: |-
        msrwrite 0xb0 0x80000694  # must write this value to this MSR before reading 0xb1
        msrread -f 15:8 0xb1 # ACTIVE IDLE - UTILIZATION POINT
    superuser: true
    modprobe: msr
    parallel: true
  - label: active idle mesh frequency
    command: |-
        msrwrite 0xb0 0x80000694  # must write this value to this MSR before reading 0xb1
        msrread -f 7:0 0xb1 # ACTIVE IDLE - MESH FREQUENCY
    superuser: true
    modprobe: msr
    parallel: true
  - label: ipmitool sel time get
    command: LC_ALL=C ipmitool sel time get
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
  - label: ipmitool sel elist
    command: LC_ALL=C ipmitool sel elist | tail -n20 | cut -d'|' -f2-
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
  - label: ipmitool chassis status
    command: LC_ALL=C ipmitool chassis status
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
  - label: ipmitool sdr list full
    command: LC_ALL=C ipmitool sdr list full
    superuser: true
    modprobe: ipmi_devintf, ipmi_si
    parallel: true
  - label: dmesg
    command: dmesg --kernel --human --nopager | tail -n20
    superuser: true
    parallel: true
  - label: msrbusy
    command: msrbusy 0x30a 0x309 0x30b 0x30c 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8
    superuser: true
    modprobe: msr
    parallel: true
  - label: lspci -vmm
    command: lspci -vmm
    parallel: true
  - label: hdparm
    command: |-
        lsblk -d -r -o NAME -e7 -e1 -n \
        | while read -r device ; do
            hdparm -i /dev/"$device"
        done
    superuser: true
    parallel: true
  - label: findmnt
    command: findmnt -r
    superuser: true
    parallel: true
  - label: nic info
    command: |-
        lshw -businfo -numeric | grep -E "^(pci|usb).*? \S+\s+network\s+\S.*?" \
        | while read -r a ifc c ; do
            ethtool "$ifc"
            ethtool -i "$ifc"
            echo -n "MAC ADDRESS $ifc: "
            cat /sys/class/net/"$ifc"/address
            echo -n "NUMA NODE $ifc: "
            cat /sys/class/net/"$ifc"/device/numa_node
            echo -n "CPU AFFINITY $ifc: "
            intlist=$( grep -e "$ifc" /proc/interrupts | cut -d':' -f1 | sed -e 's/^[[:space:]]*//' )
            for int in $intlist; do
                cpu=$( cat /proc/irq/"$int"/smp_affinity_list )
                printf "%s:%s;" "$int" "$cpu"
            done
            printf "\n"
        done
    superuser: true
    parallel: true
  - label: lspci bits
    command: lspci -s $(lspci | grep 325b | awk 'NR==1{{print $1}}') -xxx |  awk '$1 ~ /^90/{{print $9 $8 $7 $6; exit}}'
    superuser: true
    parallel: true
  - label: lspci devices
    command: lspci -d 8086:3258 | wc -l
    parallel: true 
  - label: iaa devices
    command: ls -1 /dev/iax
    parallel: true
  - label: dsa devices
    command: ls -1 /dev/dsa
    parallel: true
############
# Profile command below
# Note that this is one command because we want the profiling options to run in parallel with
# each other but not with parallel commands, i.e., the configuration collection commands.
############
  - label: profile
    superuser: true
    command: |-
        duration={{.Duration}}
        interval={{.Interval}}
        samples=$( awk -v d=$duration -v f=$interval 'BEGIN {print int(d / f)}')
        if {{.ProfileCPU}}; then
          mpstat -u -T -I SCPU -P ALL "$interval" "$samples" > mpstat.out &
        fi
        if {{.ProfileStorage}}; then
          iostat -d -t "$interval" "$samples" | sed '/^loop/d' > iostat.out &
        fi
        if {{.ProfileMemory}}; then
          sar -r "$interval" "$samples" > sar-memory.out &
        fi
        if {{.ProfileNetwork}}; then
          sar -n DEV "$interval" "$samples" > sar-network.out &
        fi
        if {{.ProfilePMU}}; then
          pmu2metrics -v --output csv -t $duration 1>pmu2metrics.out &
        fi
        if {{.ProfilePower}}; then
          turbostat -S -s PkgWatt,RAMWatt -q -i "$interval" -n "$samples" -o turbostat.out &
        fi
        ############
        wait
        if [ -f "iostat.out" ]; then
          echo "########## iostat ##########"
          cat iostat.out
        fi
        if [ -f "sar-memory.out" ]; then
          echo "########## sar-memory ##########"
          cat sar-memory.out
        fi
        if [ -f "sar-network.out" ]; then
          echo "########## sar-network ##########"
          cat sar-network.out
        fi
        if [ -f "mpstat.out" ]; then
          echo "########## mpstat ##########"
          cat mpstat.out
        fi
        if [ -f "pmu2metrics.out" ]; then
          echo "########## pmu2metrics ##########"
          cat pmu2metrics.out
        fi
        if [ -f "turbostat.out" ]; then
          echo "########## turbostat ##########"
          cat turbostat.out
        fi
# Analyze command below
# Note that this is one command because we want the analyzing options to run in parallel with
# each other but not with parallel commands, i.e., the configuration collection commands.
############
  - label: analyze
    superuser: true
    command: |-
        duration={{.Duration}}
        frequency={{.Frequency}}
        ap_interval=$( awk -v x=$frequency 'BEGIN {print int(1 / x * 1000000000)}' )
        PERF_EVENT_PARANOID=$( cat /proc/sys/kernel/perf_event_paranoid )
        echo -1 >/proc/sys/kernel/perf_event_paranoid
        KPTR_RESTRICT=$( cat /proc/sys/kernel/kptr_restrict )
        echo 0 >/proc/sys/kernel/kptr_restrict
        declare -a java_pids=()
        declare -a java_cmds=()
        if {{.AnalyzeJava}}; then
          # JAVA app call stack collection (run in background)
          for pid in $( pgrep java ) ; do
              # verify pid is still running
              if [ -d "/proc/$pid" ]; then
                  java_pids+=($pid)
                  java_cmds+=("$( tr '\000' ' ' <  /proc/$pid/cmdline )")
                  # profile pid in background
                  async-profiler/profiler.sh start -i "$ap_interval" -o collapsed "$pid"
              fi
          done
        fi
        if {{.AnalyzeSystem}}; then
          # system-wide call stack collection - frame pointer mode
          perf record -F $frequency -a -g -o perf_fp.data -m 129 -- sleep $duration &
          PERF_FP_PID=$!
          # system-wide call stack collection - dwarf mode
          perf record -F $frequency -a -g -o perf_dwarf.data -m 257 --call-graph dwarf,8192 -- sleep $duration &
          PERF_SYS_PID=$!
        fi
        sleep $duration
        if {{.AnalyzeJava}}; then
          # stop java profiling for each java pid
          for idx in "${!java_pids[@]}"; do
            pid="${java_pids[$idx]}"
            cmd="${java_cmds[$idx]}"
            echo "########## async-profiler $pid $cmd ##########"
            async-profiler/profiler.sh stop -o collapsed "$pid"
          done
        fi
        if {{.AnalyzeSystem}}; then
          # wait for perf to finish
          wait ${PERF_FP_PID}
          wait ${PERF_SYS_PID}
          perf script -i perf_dwarf.data | stackcollapse-perf.pl > perf_dwarf.folded
          perf script -i perf_fp.data | stackcollapse-perf.pl > perf_fp.folded
          if [ -f "perf_dwarf.folded" ]; then
            echo "########## perf_dwarf ##########"
            cat perf_dwarf.folded
          fi
          if [ -f "perf_fp.folded" ]; then
            echo "########## perf_fp ##########"
            cat perf_fp.folded
          fi
        fi
        echo "$PERF_EVENT_PARANOID" > /proc/sys/kernel/perf_event_paranoid
        echo "$KPTR_RESTRICT" > /proc/sys/kernel/kptr_restrict
############
# Benchmarking commands below
# Note that these do not run in parallel
############
  - label: Memory MLC Loaded Latency Test
    command: |-
        # measure memory loaded latency
        #  need at least 2 GB (2,097,152 KB) of huge pages per NUMA node
        min_kb=2097152
        numa_nodes=$( lscpu | grep "NUMA node(s):" | awk '{print $3}' )
        size_huge_pages_kb=$( cat /proc/meminfo | grep Hugepagesize | awk '{print $2}' )
        orig_num_huge_pages=$( cat /proc/sys/vm/nr_hugepages )
        needed_num_huge_pages=$( echo "$numa_nodes * $min_kb / $size_huge_pages_kb" | bc )
        if [ $needed_num_huge_pages -gt $orig_num_huge_pages ]; then
          echo $needed_num_huge_pages > /proc/sys/vm/nr_hugepages
        fi
        mlc --loaded_latency
        echo $orig_num_huge_pages > /proc/sys/vm/nr_hugepages
    modprobe: msr
    superuser: true
  - label: Memory MLC Bandwidth
    command: |-
        # measure memory bandwidth matrix
        #  need at least 2 GB (2,097,152 KB) of huge pages per NUMA node
        min_kb=2097152
        numa_nodes=$( lscpu | grep "NUMA node(s):" | awk '{print $3}' )
        size_huge_pages_kb=$( cat /proc/meminfo | grep Hugepagesize | awk '{print $2}' )
        orig_num_huge_pages=$( cat /proc/sys/vm/nr_hugepages )
        needed_num_huge_pages=$( echo "$numa_nodes * $min_kb / $size_huge_pages_kb" | bc )
        if [ $needed_num_huge_pages -gt $orig_num_huge_pages ]; then
          echo $needed_num_huge_pages > /proc/sys/vm/nr_hugepages
        fi
        mlc --bandwidth_matrix
        echo $orig_num_huge_pages > /proc/sys/vm/nr_hugepages
    modprobe: msr
    superuser: true
  - label: stress-ng cpu methods
    command: |-
        # measure cpu performance
        methods=$( stress-ng --cpu 1 --cpu-method x 2>&1 | cut -d":" -f2 | cut -c 6- )
        for method in $methods; do
            printf "%s " "$method"
            stress-ng --cpu 0 -t 1 --cpu-method "$method" --metrics-brief 2>&1 | tail -1 | awk '{print $9}'
        done
  - label: avx-turbo
    command: |-
        num_cores_per_socket=$( lscpu | grep 'Core(s) per socket:' | head -1 | awk '{print $4}' )
        avx-turbo --min-threads=1 --max-threads=$num_cores_per_socket --test scalar_iadd,avx128_fma,avx256_fma,avx512_fma
    superuser: true
    modprobe: msr
  - label: CPU Turbo Test
    command: |-
        # measure tdp and all-core turbo frequency
        ((turbostat -i 2 2>/dev/null &) ; stress-ng --cpu 1 -t 20s 2>&1 ; stress-ng --cpu 0 -t 60s 2>&1 ; pkill -9 -f turbostat) | awk '$0~"stress" {print $0} $1=="Package" || $1=="CPU" || $1=="Core" || $1=="Node" {if(f!=1) print $0;f=1} $1=="-" {print $0}'
    superuser: true
    modprobe: msr
  - label: CPU Idle
    command: |-
        # measure TDP at idle using turbostat
        turbostat --show PkgWatt -n 1 | sed -n 2p
    superuser: true
    modprobe: msr
  - label: fio
    command: |-
        # measure storage performance
        file_dir={{.FioDir}}
        file_name="fio_file"
        file_size_g=4
        runtime=30
        if [[ -d "$file_dir" && -w "$file_dir" ]]; then
            available_space=$(df -hP "$file_dir")
            count=$( echo "$available_space" | awk '/[0-9]%/{print substr($4,1,length($4)-1)}' )
            unit=$( echo "$available_space" | awk '/[0-9]%/{print substr($4,length($4),1)}' )
            if [[ "$unit" == "G"  &&  $(awk -v c="$count" -v f=$file_size_g 'BEGIN{print (c>f)?1:0}') == 1 ]] || (echo "TPEZY" | grep -F -q "$unit" ); then
                fio --randrepeat=1 --ioengine=sync --direct=1 --gtod_reduce=1 --name=test --filename="$file_dir"/"$file_name" --runtime=$runtime --bs=4k --iodepth=64 --size="$file_size_g"G --readwrite=randrw --rwmixread=75
                rm "$file_dir"/"$file_name"
            else
                echo "$file_dir does not have enough available space - $file_size_g Gigabytes required"
            fi
        else
            echo "$file_dir does not exist or is not writeable"
        fi
